# spotify_web_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module SpotifyWebApi
  # PlaylistTrackObject Model.
  class PlaylistTrackObject < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The date and time the track or episode was added. _**Note**: some very old
    # playlists may return `null` in this field._
    # @return [DateTime]
    attr_accessor :added_at

    # The Spotify user who added the track or episode. _**Note**: some very old
    # playlists may return `null` in this field._
    # @return [PlaylistUserObject]
    attr_accessor :added_by

    # Whether this track or episode is a [local
    # file](/documentation/web-api/concepts/playlists/#local-files) or not.
    # @return [TrueClass | FalseClass]
    attr_accessor :is_local

    # Information about the track or episode.
    # @return [Object]
    attr_accessor :track

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['added_at'] = 'added_at'
      @_hash['added_by'] = 'added_by'
      @_hash['is_local'] = 'is_local'
      @_hash['track'] = 'track'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        added_at
        added_by
        is_local
        track
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(added_at = SKIP, added_by = SKIP, is_local = SKIP,
                   track = SKIP)
      @added_at = added_at unless added_at == SKIP
      @added_by = added_by unless added_by == SKIP
      @is_local = is_local unless is_local == SKIP
      @track = track unless track == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      added_at = if hash.key?('added_at')
                   (DateTimeHelper.from_rfc3339(hash['added_at']) if hash['added_at'])
                 else
                   SKIP
                 end
      added_by = PlaylistUserObject.from_hash(hash['added_by']) if hash['added_by']
      is_local = hash.key?('is_local') ? hash['is_local'] : SKIP
      track = hash.key?('track') ? hash['track'] : SKIP

      # Create object from extracted values.
      PlaylistTrackObject.new(added_at,
                              added_by,
                              is_local,
                              track)
    end

    def to_custom_added_at
      DateTimeHelper.to_rfc3339(added_at)
    end
  end
end
